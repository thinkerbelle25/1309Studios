<product-recommendations 
  class="product-recommendations"
  data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=5"
>
  <div style="padding: 10px;">
    {%- if recommendations.performed and recommendations.products_count > 0 -%}
  <h1 class="recom-section-name">You may also like</h1>
  <div class="scroll-recos-on-mobile">
    <div class="related-products-div" style="padding: 10px 0;">
 
      {%- for product in recommendations.products -%}
      
          <a href="{{ product.url }}" class="product-card">
            <img
              loading="lazy"
              class="product__img"
              src="{{ product.featured_image | image_url: width: 155 }}"
              alt="{{ product.featured_image.alt }}"
              height="auto"
              width="auto"
            />
          </a>
     
      {%- endfor -%}
  
    </div></div>
  {%- endif -%}
  </div>
</product-recommendations >

{% javascript %}
  const handleIntersection = (entries, observer) => {
    if (!entries[0].isIntersecting) return;

    observer.unobserve(productRecommendationsSection);

    const url = productRecommendationsSection.dataset.url;

    fetch(url)
      .then(response => response.text())
      .then(text => {
        const html = document.createElement('div');
        html.innerHTML = text;
        const recommendations = html.querySelector('.product-recommendations');

        if (recommendations && recommendations.innerHTML.trim().length) {
          productRecommendationsSection.innerHTML = recommendations.innerHTML;
        }
      })
      .catch(e => {
        console.error(e);
      });
  };

  const productRecommendationsSection = document.querySelector('.product-recommendations');
  const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});

  observer.observe(productRecommendationsSection);
{% endjavascript %}

{% schema %}
{
  "name": "Product recommendations",
  "settings": [

  ]
}
{% endschema %}
